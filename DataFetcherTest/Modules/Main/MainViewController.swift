//
//  MainViewController.swift
//  DataFetcherTest
//
//  Created by Davron on 10.06.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol MainDisplayLogic: class
{
    func displayMainData(viewModel: Main.MainData.ViewModel)
    //    func displaySomethingElse(viewModel: Main.SomethingElse.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic, UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate {
    
    //MARK: Variables
    
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic)?
    var items:[MainItemModel] = []
    var pageNumber = 1
    var isPaginating = true
    
    //MARK: UI Elements
    
    var tableView: UITableView = {
        let table = UITableView(frame: .zero)
        return table
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup Clean Code Design Pattern 
    
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        //Set the title of VC
        title = "Main List"
        
        setUpViews()
        setUpConstraints()
        
        //Requesting first page of data
        requestData(pageNumber: pageNumber)
    }
    
    //Set up Views in VC
    func setUpViews() {
        view.addSubview(tableView)
        tableView.delegate = self
        tableView.dataSource = self
        tableView.estimatedRowHeight = 80.0
        tableView.register(MainTableViewCell.self, forCellReuseIdentifier: "cell")
        tableView.rowHeight = UITableView.automaticDimension
    }
    
    //Set up constraints
    func setUpConstraints() {
        tableView.snp.makeConstraints{(make) in
            make.left.right.bottom.top.equalToSuperview()
        }
    }
    
    // MARK: - request data from MainInteractor
    
    func requestData(pageNumber: Int) {
        isPaginating = true
        DispatchQueue.main.async {[weak self] in
            self?.tableView.tableFooterView = self?.tableViewFooterView()
        }
        let request = Main.MainData.Request(page: pageNumber)
        interactor?.requestData(request: request)
    }
    
    // MARK: - display view model from MainPresenter
    
    func displayMainData(viewModel: Main.MainData.ViewModel) {
        items.append(contentsOf: viewModel.mainData)
        DispatchQueue.main.async {[weak self] in
            self?.tableView.reloadData()
            self?.tableView.tableFooterView = nil
        }
        isPaginating = false
    } 
}

//MARK: Table View methods

extension MainViewController {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return items.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! MainTableViewCell 
        cell.title.text = items[indexPath.row].title
        cell.body.text = items[indexPath.row].body
        cell.updateConstraintsIfNeeded()
        return cell
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let position = scrollView.contentOffset.y
        //Requesting data with pagination
        if position > tableView.contentSize.height - 140 - scrollView.frame.height && !isPaginating{
            pageNumber += 1
            requestData(pageNumber: pageNumber)
        }
    }
    
    //Spinner for footer of the TableView
    private func tableViewFooterView() -> UIView {
        let footerView = UIView(frame: CGRect(x: 0, y: 0, width: tableView.frame.width, height: 80))
        let spinner = UIActivityIndicatorView()
        spinner.center = footerView.center
        footerView.addSubview(spinner)
        spinner.startAnimating()
        return footerView
    }
    
    //Selecting TableView cell at indexPath
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //Passing data to router
        router?.routeToDetails(data: items[indexPath.row])
        //Deselcting cell
        tableView.deselectRow(at: indexPath, animated: false)
    }
}
